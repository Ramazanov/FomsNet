//Octopus MFS is an integrated suite for managing a Micro Finance Institution: clients, contracts, accounting, reporting and risk
//Copyright © 2006,2007 OCTO Technology & OXUS Development Network
//
//This program is free software; you can redistribute it and/or modify
//it under the terms of the GNU Lesser General Public License as published by
//the Free Software Foundation; either version 2 of the License, or
//(at your option) any later version.
//
//This program is distributed in the hope that it will be useful,
//but WITHOUT ANY WARRANTY; without even the implied warranty of
//MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//GNU Lesser General Public License for more details.
//
//You should have received a copy of the GNU Lesser General Public License along
//with this program; if not, write to the Free Software Foundation, Inc.,
//51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
//
//
// Licence : http://www.octopusnetwork.org/OverviewLicence.aspx
//
// Website : http://www.octopusnetwork.org
// Business contact: business(at)octopusnetwork.org
// Technical contact email : tech(at)octopusnetwork.org 


using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using Octopus.CoreDomain;
using Octopus.CoreDomain.Accounting;
using Octopus.DatabaseConnection;
using Octopus.ExceptionsHandler;
using Octopus.Manager.Currencies;
using Octopus.Services.Accounting;

namespace Octopus.Services.Currencies
{
    public class CurrencyServices : Services //MarshalByRefObject
    {
        private readonly CurrencyManager _currencyManager;
        private User _User;
        public CurrencyServices(User pUser)
        {
            _currencyManager = new CurrencyManager(pUser);
            _User = pUser;
        }

        public CurrencyServices(string pTestDb)
        {
            _currencyManager = new CurrencyManager(pTestDb);
        }

        public List<Currency> FindAllCurrencies(SqlTransaction pSqlTransac)
        {
            return _currencyManager.SelectAllCurrencies(pSqlTransac);
        }
        public List<Currency> FindAllCurrencies()
        {
            SqlTransaction sqlTransac = ConnectionManager.GetInstance().GetSqlTransaction(_User.Md5);
            try
            {
                List<Currency> _currencies = FindAllCurrencies(sqlTransac);
                sqlTransac.Commit();
                return _currencies;
            }
            catch
            {
                sqlTransac.Rollback();
                return null;
            }
        }

        public Currency FindCurrencyByName(string name)
        {
            return _currencyManager.SelectCurrencyByName(name);
        }

        public int AddNewCurrency(Currency pNewCurrency)
        {

            int cId = 0;
            if (_currencyManager.IsThisCurrencyAlreadyExist(pNewCurrency.Code, pNewCurrency.Name)) 
                throw new OctopusAccountException(OctopusAccountExceptionsEnum.CurrencyAlreadyExists);

            SqlTransaction sqlTransac = ConnectionManager.GetInstance().GetSqlTransaction(_User.Md5);

            if (_currencyManager.SelectAllCurrencies(sqlTransac).Count > 1)
                throw new OctopusAccountException(OctopusAccountExceptionsEnum.MaximumCurrencyLimitReached);

            try
            {                            

                cId = _currencyManager.Add(pNewCurrency, sqlTransac);
                sqlTransac.Commit();
                
            }
            catch (Exception)
            {
                sqlTransac.Rollback();
                throw;
            }
            return cId;

        }
        public void UpdateNewCurrency(Currency pNewCurrency)
        {
            SqlTransaction sqlTransac = ConnectionManager.GetInstance().GetSqlTransaction(_User.Md5);

            try
            {

                _currencyManager.Update(pNewCurrency, sqlTransac);
                sqlTransac.Commit();
            }
            catch (Exception)
            {
                sqlTransac.Rollback();
                throw;
            }
        }
        public Currency GetPivot()
        {
            return _currencyManager.GetPivot();
        }

        public Currency GetCurrency(int pCurrency_id)
        {
            return _currencyManager.SelectCurrencyById(pCurrency_id);
        }
    }
}