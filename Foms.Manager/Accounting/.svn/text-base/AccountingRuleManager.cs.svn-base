using System;
using System.Collections.Generic;
using System.Data;
using System.Text;
using System.Linq;
using Octopus.CoreDomain;
using Octopus.CoreDomain.Accounting;
using System.Data.SqlClient;
using Octopus.CoreDomain.EconomicActivities;
using Octopus.CoreDomain.Events;
using Octopus.Enums;
using Octopus.CoreDomain.Products;
using Octopus.Manager.Currencies;
using Octopus.Manager.Products;
using Octopus.CoreDomain.FundingLines;

namespace Octopus.Manager.Accounting
{
    public class AccountingRuleManager : Manager
    {
        private AccountManager _accountManager;
        private LoanProductManager _loanProductManager;
        private GuaranteeProductManager _guaranteeProductManager;
        private SavingProductManager _savingProductManager;
        private EconomicActivityManager _economicActivityManager;
        private FundingLineManager _fundingLineManager;
        private CurrencyManager _currencyManager;

        public AccountingRuleManager(User pUser) : base(pUser) 
        {
            _accountManager = new AccountManager(pUser);
            _loanProductManager = new LoanProductManager(pUser);
            _guaranteeProductManager = new GuaranteeProductManager(pUser);
            _savingProductManager = new SavingProductManager(pUser);
            _economicActivityManager = new EconomicActivityManager(pUser);
            _fundingLineManager = new FundingLineManager(pUser);
            _currencyManager = new CurrencyManager(pUser);
        }

        public AccountingRuleManager(string pTestDB) : base(pTestDB) 
        {
            _accountManager = new AccountManager(pTestDB);
            _loanProductManager = new LoanProductManager(pTestDB);
            _guaranteeProductManager = new GuaranteeProductManager(pTestDB);
            _savingProductManager = new SavingProductManager(pTestDB);
            _economicActivityManager = new EconomicActivityManager(pTestDB);
            _fundingLineManager = new FundingLineManager(pTestDB);
            _currencyManager = new CurrencyManager(pTestDB);
        }

        public int AddAccountingRule(IAccountingRule pRule, SqlTransaction pSqlTransaction)
        {
            const string sqlText = @"INSERT INTO [AccountingRules] (
                                       [debit_account_number_id], 
                                       [credit_account_number_id], 
                                       [rule_type], 
                                       [booking_direction],
                                       [event_type],
                                       [event_attribute_id],
                                       [order],
                                       [description])
                                    VALUES (@debit_account_number_id, 
                                            @credit_account_number_id, 
                                            @rule_type, 
                                            @booking_direction,
                                            @event_type,
                                            @event_attribute_id,
                                            @order,
                                            @description)
                                    SELECT SCOPE_IDENTITY()";

            using (SqlCommand insert = new SqlCommand(sqlText, DefaultConnection, pSqlTransaction))
            {
                DatabaseHelper.InsertInt32Param("@debit_account_number_id", insert, pRule.DebitAccount.Id);
                DatabaseHelper.InsertInt32Param("@credit_account_number_id", insert, pRule.CreditAccount.Id);
                DatabaseHelper.InsertCharParam("@rule_type", insert, pRule is ContractAccountingRule ? 'C' : 'F');
                DatabaseHelper.InsertSmalIntParam("@booking_direction", insert, (int)pRule.BookingDirection);

                DatabaseHelper.InsertStringNVarCharParam("@event_type", insert, pRule.EventType.EventCode);
                DatabaseHelper.InsertInt32Param("@event_attribute_id", insert, pRule.EventAttribute.Id);
                DatabaseHelper.InsertInt32Param("@order", insert, pRule.Order);
                DatabaseHelper.InsertStringNVarCharParam("@description", insert, pRule.Description);
                pRule.Id = Convert.ToInt32(insert.ExecuteScalar());
            }

            if (pRule is ContractAccountingRule)
                AddContractAccountingRule(pRule as ContractAccountingRule, pSqlTransaction);
            else
                AddFundingLineAccountingRule(pRule as FundingLineAccountingRule, pSqlTransaction);
 
            return pRule.Id;
        }

        private void AddContractAccountingRule(ContractAccountingRule pRule, SqlTransaction pSqlTransaction)
        {
            const string sqlText = @"INSERT INTO 
                                       [ContractAccountingRules] 
                                         ([id], 
                                          [product_type], 
                                          [loan_product_id], 
                                          [guarantee_product_id], 
                                          [savings_product_id], 
                                          [client_type], 
                                          [activity_id],
                                          [currency_id],
                                          [payment_method_id])
                                     VALUES 
                                        (@id, 
                                         @productType, 
                                         @loanProductId, 
                                         @guaranteeProductId, 
                                         @savingsProductId, 
                                         @clientType, 
                                         @activityId,
                                         @currency_id,
                                         @payment_method_id)";

            using (SqlCommand insert = new SqlCommand(sqlText, DefaultConnection))
            {
                _setAccountingRule(insert, pRule);
                insert.ExecuteNonQuery();
            }
        }

        private void AddFundingLineAccountingRule(FundingLineAccountingRule pRule, SqlTransaction pSqlTransaction)
        {
            const string sqlText = @"INSERT INTO [FundingLineAccountingRules]
                                        ([id], 
                                         [funding_line_id])
                                    VALUES
                                        (@id, 
                                         @fundingLineId)";

            using (SqlCommand insert = new SqlCommand(sqlText, DefaultConnection, pSqlTransaction))
            {
                _setAccountingRule(insert, pRule);
                insert.ExecuteNonQuery();
            }
        }

        public void UpdateAccountingRule(IAccountingRule pRule, SqlTransaction pSqlTransaction)
        {
            const string sqlText = @"UPDATE [AccountingRules]
                                     SET [debit_account_number_id] = @debit_account_number_id,
                                         [credit_account_number_id] = @credit_account_number_id,
                                         [booking_direction] = @booking_direction,
                                         event_type = @event_type,
                                         event_attribute_id = @event_attribute_id,
                                         [order] = @order,
                                         [description] = @description
                                     WHERE id = @id";

            using (SqlCommand update = new SqlCommand(sqlText, DefaultConnection, pSqlTransaction))
            {
                DatabaseHelper.InsertInt32Param("@id", update, pRule.Id);
                DatabaseHelper.InsertInt32Param("@debit_account_number_id", update, pRule.DebitAccount.Id);
                DatabaseHelper.InsertInt32Param("@credit_account_number_id", update, pRule.CreditAccount.Id);
                DatabaseHelper.InsertStringNVarCharParam("@event_type", update, pRule.EventType.EventCode);
                DatabaseHelper.InsertInt32Param("@event_attribute_id", update, pRule.EventAttribute.Id);
                DatabaseHelper.InsertSmalIntParam("@booking_direction", update, (int)pRule.BookingDirection);
                DatabaseHelper.InsertInt32Param("@order", update, pRule.Order);
                DatabaseHelper.InsertStringNVarCharParam("@description", update, pRule.Description);
                update.ExecuteNonQuery();
            }

            if (pRule is ContractAccountingRule)
                UpdateContractAccountingRule(pRule as ContractAccountingRule, pSqlTransaction);
            else
                UpdateFundingLineAccountingRule(pRule as FundingLineAccountingRule, pSqlTransaction);
        }

        private void UpdateContractAccountingRule(ContractAccountingRule pRule, SqlTransaction pSqlTransaction)
        {
            const string sqlText = @"UPDATE [ContractAccountingRules]
                                     SET [product_type] = @productType,
                                         [loan_product_id] = @loanProductId,
                                         [guarantee_product_id] = @guaranteeProductId,
                                         [savings_product_id] = @savingsProductId,
                                         [client_type] = @clientType,
                                         [activity_id] = @activityId,
                                         [currency_id] = @currency_id,
                                         [payment_method_id] = @payment_method_id
                                     WHERE id = @id";

            using (SqlCommand update = new SqlCommand(sqlText, DefaultConnection, pSqlTransaction))
            {
                _setAccountingRule(update, pRule);
                update.ExecuteNonQuery();
            }
        }

        private void UpdateFundingLineAccountingRule(FundingLineAccountingRule pRule, SqlTransaction pSqlTransaction)
        {
            const string sqlText = @"UPDATE [FundingLineAccountingRules]
                                     SET [funding_line_id] = @fundingLineId
                                     WHERE id = @id";

            using (SqlCommand update = new SqlCommand(sqlText, DefaultConnection, pSqlTransaction))
            {
                _setAccountingRule(update, pRule);
                update.ExecuteNonQuery();
            }
        }

        public void DeleteAccountingRule(IAccountingRule pRule)
        {
            const string sqlText = @"UPDATE [AccountingRules]
                                     SET [deleted] = 1
                                     WHERE id = @id";

            using (SqlCommand delete = new SqlCommand(sqlText, DefaultConnection))
            {
                DatabaseHelper.InsertInt32Param("@id", delete, pRule.Id);
                delete.ExecuteNonQuery();
            }
        }

        public void DeleteAllAccountingRules()
        {
            const string sqlText1 = @"DELETE FROM [ContractAccountingRules]";

            using (SqlCommand delete = new SqlCommand(sqlText1, DefaultConnection))
            {
                delete.ExecuteNonQuery();
            }

            const string sqlText2 = @"DELETE FROM [AccountingRules]";

            using (SqlCommand delete = new SqlCommand(sqlText2, DefaultConnection))
            {
                delete.ExecuteNonQuery();
            }
        }

        public IAccountingRule Select(int pId)
        {
            const string sqlText = @"SELECT rule_type
                                     FROM [AccountingRules]
                                     WHERE deleted = 0 
                                     AND id = @id";

            IAccountingRule rule;

            using (SqlCommand select = new SqlCommand(sqlText, DefaultConnection))
            {
                DatabaseHelper.InsertInt32Param("@id", select, pId);

                using (SqlDataReader reader = select.ExecuteReader())
                {
                    if (reader == null || !reader.HasRows) return null;

                    reader.Read();
                    if (DatabaseHelper.GetChar("rule_type", reader) == 'C')
                        rule = new ContractAccountingRule { Id = pId };
                    else
                        rule = new FundingLineAccountingRule { Id = pId };
                }
            }

            if (rule is ContractAccountingRule)
                rule = SelectContractAccountingRule(rule.Id);
            else
                rule = SelectFundingLineAccountingRule(rule.Id);

            List<Account> accounts = _accountManager.SelectAllAccounts();
            rule.DebitAccount = accounts.FirstOrDefault(item => item.Id == rule.DebitAccount.Id);
            rule.CreditAccount = accounts.FirstOrDefault(item => item.Id == rule.CreditAccount.Id);
           
            return rule;
        }

        private ContractAccountingRule SelectContractAccountingRule(int pId)
        {
            const string sqlText = @"SELECT AccountingRules.id,
                                            AccountingRules.debit_account_number_id, 
                                            AccountingRules.credit_account_number_id,
                                            AccountingRules.booking_direction,
                                            AccountingRules.event_type,
                                            AccountingRules.event_attribute_id,
                                            AccountingRules.[order],
                                            AccountingRules.[description] AS rule_description,
                                            EventAttributes.name AS attribute_name,
                                            EventTypes.description AS event_description,
                                            ContractAccountingRules.product_type, 
                                            ContractAccountingRules.loan_product_id, 
                                            ContractAccountingRules.guarantee_product_id, 
                                            ContractAccountingRules.savings_product_id, 
                                            ContractAccountingRules.client_type, 
                                            ContractAccountingRules.activity_id,
                                            ContractAccountingRules.currency_id,
                                            ContractAccountingRules.payment_method_id
                                    FROM AccountingRules
                                    INNER JOIN EventAttributes ON EventAttributes.id = AccountingRules.event_attribute_id
                                    INNER JOIN EventTypes ON AccountingRules.event_type = EventTypes.event_type
                                    LEFT JOIN ContractAccountingRules ON AccountingRules.id = ContractAccountingRules.id                                    
                                    WHERE AccountingRules.id = @id";

            ContractAccountingRule rule;

            using (SqlCommand select = new SqlCommand(sqlText, DefaultConnection))
            {
                DatabaseHelper.InsertInt32Param("@id", select, pId);

                using (SqlDataReader reader = select.ExecuteReader())
                {
                    if (reader == null || !reader.HasRows) return null;

                    reader.Read();
                    rule = _getContractAccountingRule(reader);
                }
            }

            if (rule.LoanProduct != null)
                rule.LoanProduct = _loanProductManager.Select(rule.LoanProduct.Id);

            if (rule.Currency != null)
                rule.Currency = _currencyManager.SelectCurrencyById(rule.Currency.Id);
            if (rule.Currency == null)
                rule.Currency = new Currency(){Id = 0};

            if (rule.GuaranteeProduct != null)
                rule.GuaranteeProduct = _guaranteeProductManager.SelectGuaranteePackageById(rule.GuaranteeProduct.Id);

            if (rule.SavingProduct != null)
                rule.SavingProduct = _savingProductManager.SelectSavingProduct(rule.SavingProduct.Id);

            if (rule.EconomicActivity != null)
                rule.EconomicActivity = _economicActivityManager.SelectEconomicActivity(rule.EconomicActivity.Id);

            return rule;
        }

        private FundingLineAccountingRule SelectFundingLineAccountingRule(int pId)
        {
            const string sqlText = @"SELECT AccountingRules.id,
                                            AccountingRules.debit_account_number_id, 
                                            AccountingRules.credit_account_number_id,
                                            AccountingRules.booking_direction,
                                            FundingLineAccountingRules.funding_line_id
                                    FROM AccountingRules
                                    INNER JOIN FundingLineAccountingRules ON AccountingRules.id = FundingLineAccountingRules.id
                                    WHERE AccountingRules.id = @id";
            
            FundingLineAccountingRule rule;

            using (SqlCommand select = new SqlCommand(sqlText, DefaultConnection))
            {
                DatabaseHelper.InsertInt32Param("@id", select, pId);

                using (SqlDataReader reader = select.ExecuteReader())
                {
                    if (reader == null || !reader.HasRows) return null;

                    reader.Read();
                    rule = _getFundingLineAccountingRule(reader);
                }
            }

            if (rule.FundingLine != null)
                rule.FundingLine = _fundingLineManager.SelectFundingLineById(rule.FundingLine.Id, false);

            return rule;
        }

        public AccountingRuleCollection SelectAll()
        {
            const string sqlText = @"SELECT id, rule_type
                                     FROM [AccountingRules] 
                                     WHERE deleted = 0";

            AccountingRuleCollection rules = new AccountingRuleCollection();

            using (SqlCommand select = new SqlCommand(sqlText, DefaultConnection))
            {
                using (SqlDataReader reader = select.ExecuteReader())
                {
                    if (reader == null || !reader.HasRows) return rules;

                    while (reader.Read())
                    {
                        if (DatabaseHelper.GetChar("rule_type", reader) == 'C')
                            rules.Add(new ContractAccountingRule { Id = DatabaseHelper.GetInt32("id", reader) });
                        else
                            rules.Add(new FundingLineAccountingRule { Id = DatabaseHelper.GetInt32("id", reader) });

                    }
                }
            }

            List<Account> accounts = _accountManager.SelectAllAccounts();
            for (int i = 0; i < rules.Count; i++)
            {

                if (rules[i] is ContractAccountingRule)
                {
                    rules[i] = SelectContractAccountingRule(rules[i].Id);
                }
                else
                {
                    rules[i] = SelectFundingLineAccountingRule(rules[i].Id);
                }

                rules[i].DebitAccount = accounts.FirstOrDefault(item => item.Id == rules[i].DebitAccount.Id);
                rules[i].CreditAccount = accounts.FirstOrDefault(item => item.Id == rules[i].CreditAccount.Id);
            }

            return rules;
        }

        public DataSet GetRuleCollectionDataset()
        {
            const string sqlText = @"SELECT 
                                      event_type, 
                                      event_attribute_id, 
                                      debit_account_number_id, 
                                      credit_account_number_id, 
                                      [order],       
                                      [description],
                                      product_type,
                                      loan_product_id, 
                                      guarantee_product_id,
                                      savings_product_id,
                                      client_type, 
                                      activity_id,
                                      currency_id,
                                      payment_method_id
                                    FROM dbo.AccountingRules ar
                                    INNER JOIN dbo.ContractAccountingRules cr ON ar.id = cr.id
                                    WHERE deleted = 0";

            using (SqlCommand select = new SqlCommand(sqlText, DefaultConnection))
            {
                using (SqlDataAdapter adapter = new SqlDataAdapter(select))
                {
                    DataSet dataSet = new DataSet();
                    adapter.Fill(dataSet);
                    return dataSet;
                }
            }
        }

        public AccountingRuleCollection SelectAllByEventType(string type)
        {
            const string sqlText = @"SELECT id, rule_type
                                     FROM [AccountingRules] 
                                     WHERE deleted = 0
                                       AND (event_type = @event_type OR @event_type = '')";

            AccountingRuleCollection rules = new AccountingRuleCollection();

            using (SqlCommand select = new SqlCommand(sqlText, DefaultConnection))
            {
                DatabaseHelper.InsertStringNVarCharParam("@event_type", select, type);

                using (SqlDataReader reader = select.ExecuteReader())
                {
                    if (reader == null || !reader.HasRows) return rules;

                    while (reader.Read())
                    {
                        if (DatabaseHelper.GetChar("rule_type", reader) == 'C')
                            rules.Add(new ContractAccountingRule { Id = DatabaseHelper.GetInt32("id", reader) });
                        else
                            rules.Add(new FundingLineAccountingRule { Id = DatabaseHelper.GetInt32("id", reader) });

                    }
                }
            }

            List<Account> accounts = _accountManager.SelectAllAccounts();
            for (int i = 0; i < rules.Count; i++)
            {

                if (rules[i] is ContractAccountingRule)
                {
                    rules[i] = SelectContractAccountingRule(rules[i].Id);
                }
                else
                {
                    rules[i] = SelectFundingLineAccountingRule(rules[i].Id);
                }

                rules[i].DebitAccount = accounts.FirstOrDefault(item => item.Id == rules[i].DebitAccount.Id);
                rules[i].CreditAccount = accounts.FirstOrDefault(item => item.Id == rules[i].CreditAccount.Id);
            }

            return rules;
        }

        private void _setAccountingRule(SqlCommand insert, ContractAccountingRule pRule)
        {
            DatabaseHelper.InsertInt32Param("@id", insert, pRule.Id);
            DatabaseHelper.InsertSmalIntParam("@productType", insert, (int)pRule.ProductType);
            DatabaseHelper.InsertInt32Param("@payment_method_id", insert, (int) pRule.PaymentMethod);
            
            if (pRule.LoanProduct != null)
                DatabaseHelper.InsertInt32Param("@loanProductId", insert, pRule.LoanProduct.Id);
            else
                DatabaseHelper.InsertInt32Param("@loanProductId", insert, null);

            if (pRule.Currency != null)
                DatabaseHelper.InsertInt32Param("@currency_id", insert, pRule.Currency.Id);
            else
                DatabaseHelper.InsertInt32Param("@currency_id", insert, null);

            if (pRule.GuaranteeProduct != null)
                DatabaseHelper.InsertInt32Param("@guaranteeProductId", insert, pRule.GuaranteeProduct.Id);
            else
                DatabaseHelper.InsertInt32Param("@guaranteeProductId", insert, null);

            if (pRule.SavingProduct != null)
                DatabaseHelper.InsertInt32Param("@savingsProductId", insert, pRule.SavingProduct.Id);
            else
                DatabaseHelper.InsertInt32Param("@savingsProductId", insert, null);

            if (pRule.ClientType == OClientTypes.Corporate)
                DatabaseHelper.InsertCharParam("@clientType", insert, 'C');
            else if (pRule.ClientType == OClientTypes.Group)
                DatabaseHelper.InsertCharParam("@clientType", insert, 'G');
            else if (pRule.ClientType == OClientTypes.Person)
                DatabaseHelper.InsertCharParam("@clientType", insert, 'I');
            else if (pRule.ClientType == OClientTypes.Village)
                DatabaseHelper.InsertCharParam("@clientType", insert, 'V');
            else
                DatabaseHelper.InsertCharParam("@clientType", insert, '-');

            if (pRule.EconomicActivity != null)
                DatabaseHelper.InsertInt32Param("@activityId", insert, pRule.EconomicActivity.Id);
            else
                DatabaseHelper.InsertInt32Param("@activityId", insert, null);
        }

        private void _setAccountingRule(SqlCommand insert, FundingLineAccountingRule pRule)
        {
            DatabaseHelper.InsertInt32Param("@id", insert, pRule.Id);

            if (pRule.FundingLine != null)
                DatabaseHelper.InsertInt32Param("@fundingLineId", insert, pRule.FundingLine.Id);
            else
                DatabaseHelper.InsertInt32Param("@fundingLineId", insert, null);
        }

        private ContractAccountingRule _getContractAccountingRule(SqlDataReader reader)
        {
            ContractAccountingRule rule = new ContractAccountingRule();

            rule.Id = DatabaseHelper.GetInt32("id", reader);
            rule.EventType = new EventType
                                 {
                                     EventCode = DatabaseHelper.GetString("event_type", reader),
                                     Description = DatabaseHelper.GetString("event_description", reader)
                                 };
            rule.EventAttribute = new EventAttribute
                                      {
                                          Id = DatabaseHelper.GetInt32("event_attribute_id", reader),
                                          Name = DatabaseHelper.GetString("attribute_name", reader)
                                      };
            rule.DebitAccount = new Account { Id = DatabaseHelper.GetInt32("debit_account_number_id", reader) };
            rule.CreditAccount = new Account { Id = DatabaseHelper.GetInt32("credit_account_number_id", reader) };
            rule.BookingDirection = (OBookingDirections)DatabaseHelper.GetSmallInt("booking_direction", reader);
            rule.Order = DatabaseHelper.GetInt32("order", reader);
            rule.Description = DatabaseHelper.GetString("rule_description", reader);
            
            rule.ProductType = (OProductTypes)DatabaseHelper.GetSmallInt("product_type", reader);
            rule.PaymentMethod = (OPaymentMethods)DatabaseHelper.GetInt32("payment_method_id", reader);

            int? loanProductId = DatabaseHelper.GetNullAuthorizedInt32("loan_product_id", reader);
            if (loanProductId.HasValue)
                rule.LoanProduct = new LoanProduct { Id = loanProductId.Value };

            int? currencyId = DatabaseHelper.GetNullAuthorizedInt32("currency_id", reader);
            if (currencyId.HasValue)
                rule.Currency = new Currency { Id = currencyId.Value };

            int? guaranteeProductId = DatabaseHelper.GetNullAuthorizedInt32("guarantee_product_id", reader);
            if (guaranteeProductId.HasValue)
                rule.GuaranteeProduct = new GuaranteeProduct { Id = guaranteeProductId.Value };

            int? savingsProductId = DatabaseHelper.GetNullAuthorizedInt32("savings_product_id", reader);
            if (savingsProductId.HasValue)
                rule.SavingProduct = new SavingBookProduct { Id = savingsProductId.Value };

            rule.ClientType = DatabaseHelper.GetChar("client_type", reader) == 'C'
                                     ? OClientTypes.Corporate
                                     : DatabaseHelper.GetChar("client_type", reader) == 'G'
                                           ? OClientTypes.Group
                                           : DatabaseHelper.GetChar("client_type", reader) == 'I'
                                                 ? OClientTypes.Person
                                                 : DatabaseHelper.GetChar("client_type", reader) == 'V'
                                                    ? OClientTypes.Village
                                                    : OClientTypes.Both;

            int? activityId = DatabaseHelper.GetNullAuthorizedInt32("activity_id", reader);
            if (activityId.HasValue)
                rule.EconomicActivity = new EconomicActivity { Id = activityId.Value };

            return rule;
        }

        private FundingLineAccountingRule _getFundingLineAccountingRule(SqlDataReader reader)
        {
            FundingLineAccountingRule rule = new FundingLineAccountingRule();

            rule.Id = DatabaseHelper.GetInt32("id", reader);
            rule.DebitAccount = new Account { Id = DatabaseHelper.GetInt32("debit_account_number_id", reader) };
            rule.CreditAccount = new Account { Id = DatabaseHelper.GetInt32("credit_account_number_id", reader) };
            rule.BookingDirection = (OBookingDirections)DatabaseHelper.GetSmallInt("booking_direction", reader);
            
            int? fundingLineId = DatabaseHelper.GetNullAuthorizedInt32("funding_line_id", reader);

            if (fundingLineId.HasValue)
                rule.FundingLine = new FundingLine { Id = fundingLineId.Value };

            return rule;
        }
    }
}
