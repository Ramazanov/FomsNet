//Octopus MFS is an integrated suite for managing a Micro Finance Institution: clients, contracts, accounting, reporting and risk
//Copyright Â© 2006,2007 OCTO Technology & OXUS Development Network
//
//This program is free software; you can redistribute it and/or modify
//it under the terms of the GNU Lesser General Public License as published by
//the Free Software Foundation; either version 2 of the License, or
//(at your option) any later version.
//
//This program is distributed in the hope that it will be useful,
//but WITHOUT ANY WARRANTY; without even the implied warranty of
//MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//GNU Lesser General Public License for more details.
//
//You should have received a copy of the GNU Lesser General Public License along
//with this program; if not, write to the Free Software Foundation, Inc.,
//51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
//
//
// Licence : http://www.octopusnetwork.org/OverviewLicence.aspx
//
// Website : http://www.octopusnetwork.org
// Business contact: business(at)octopusnetwork.org
// Technical contact email : tech(at)octopusnetwork.org 

using System.Collections.Generic;
using Octopus.CoreDomain;
using Octopus.CoreDomain.Accounting;
using Octopus.CoreDomain.Products;
using Octopus.Enums;
using System.Data.SqlClient;

namespace Octopus.Manager.Products
{
    /// <summary>
    /// This class provides all the methods required to manages Package datas in database
    /// </summary>
    public class SavingProductManager : Manager
    {

        public SavingProductManager(User pUser) : base(pUser)
        {
        }

        public SavingProductManager(string testDB) : base(testDB)
        {
        }

        /// <summary>
        /// Method to add a package into database. We use the NullableTypes to make the correspondance between
        /// nullable int, decimal and double types in database and our own objects
        /// </summary>
        /// <param name="pProduct">Package Object</param>
        /// <returns>The id of the package which has been added</returns>
        public int Add(ISavingProduct pProduct)
        {
            const string sqlText = @"INSERT INTO [SavingProducts] 
                (
                    [deleted],
                    [name],
                    [code],
                    [client_type],
                    [initial_amount_min],
                    [initial_amount_max],
                    [balance_min],
                    [balance_max],
                    [deposit_min],
                    [deposit_max],
                    [withdraw_min],
                    [withdraw_max],
                    [transfer_min],
                    [transfer_max],
                    [interest_rate],
                    [interest_rate_min],
                    [interest_rate_max],
                    [entry_fees_max],
                    [entry_fees_min],
                    [entry_fees],
                    [currency_id],
                    [product_type]
                )
                VALUES 
                (
                    @deleted,
                    @name,
                    @code,
                    @clientType,
                    @initialAmountMin,
                    @initialAmountMax,
                    @balanceMin,
                    @balanceMax,
                    @depositMin,
                    @depositMax,
                    @withdrawMin,
                    @withdrawMax,
                    @transferMin,
                    @transferMax,
                    @interestRate,
                    @interestRateMin,
                    @interestRateMax,
                    @entryFeesMax,
                    @entryFeesMin,
                    @entryFees,
                    @currency_id,
                    @product_type
                ) 
                SELECT CONVERT(int, SCOPE_IDENTITY())";

            using (SqlCommand insertPackage = new SqlCommand(sqlText, DefaultConnection))
            {
                if (pProduct is SavingBookProduct)
                    DatabaseHelper.InsertCharParam("@product_type", insertPackage, 'B');
                else if (pProduct is TermDepositProduct)
                    DatabaseHelper.InsertCharParam("@product_type", insertPackage, 'T');
                //else if (pProduct is CompulsorySavingsProduct)
                //    DatabaseHelper.InsertCharParam("@product_type", insertPackage, 'C');

                SetProduct(insertPackage, pProduct);
                pProduct.Id = int.Parse(insertPackage.ExecuteScalar().ToString());
            }

            if (pProduct is SavingBookProduct)
            {
                AddBookProduct((SavingBookProduct)pProduct);
                AssignClientTypes(((SavingBookProduct)pProduct).ProductClientTypes, pProduct.Id);
            }
            else if (pProduct is TermDepositProduct)
            {
                AddTermDepositProduct((TermDepositProduct)pProduct);
                AssignClientTypes(((TermDepositProduct)pProduct).ProductClientTypes, pProduct.Id);
            }   
            /*else if (pProduct is CompulsorySavingsProduct)
            {
                AddCompulsorySavingsProduct((CompulsorySavingsProduct)pProduct);
                CompulsorySavingsProduct csp = (CompulsorySavingsProduct) pProduct;
                AssignClientTypes(((CompulsorySavingsProduct)pProduct).ProductClientTypes, csp.Id);
            }*/
            return pProduct.Id;
        }

        private void AssignClientTypes(List<ProductClientType> productClientTypes, int productId)
        {
            foreach (ProductClientType clientType in productClientTypes)
            {
                if (clientType.IsChecked)
                {
                    string sqlText2 = string.Format(@"INSERT INTO [dbo].[SavingProductsClientTypes] 
                                                        ([saving_product_id], [client_type_id])
                                                        VALUES({0},{1})", productId, clientType.TypeId);
                    using (SqlCommand insertClientType = new SqlCommand(sqlText2, DefaultConnection))
                    {
                        insertClientType.ExecuteNonQuery();
                    }
                }
            }
        }

        private void DeleteAssignedClientTypes(int savingProductId)
        {
            string sqlText =
                string.Format(
                    @"DELETE FROM [dbo].[SavingProductsClientTypes]
                      WHERE [saving_product_id]={0}",
                    savingProductId);
            using (SqlCommand cmd = new SqlCommand(sqlText,DefaultConnection))
            {
                cmd.ExecuteNonQuery();
            }
        }

        private void AddBookProduct(SavingBookProduct pProduct)
        {
            const string sqlText = @"INSERT INTO [SavingBookProducts] 
                (
                     [id]
                    ,[interest_base]
                    ,[interest_frequency]
                    ,[calcul_amount_base]
                    ,[withdraw_fees_type]
                    ,[flat_withdraw_fees_min]
                    ,[flat_withdraw_fees_max]
                    ,[flat_withdraw_fees]
                    ,[rate_withdraw_fees_min]
                    ,[rate_withdraw_fees_max]
                    ,[rate_withdraw_fees]
                    ,[transfer_fees_type]
                    ,[flat_transfer_fees_min]
                    ,[flat_transfer_fees_max]
                    ,[flat_transfer_fees]
                    ,[rate_transfer_fees_min]
                    ,[rate_transfer_fees_max]
                    ,[rate_transfer_fees]
                    ,[deposit_fees]
                    ,[deposit_fees_max]
                    ,[deposit_fees_min]
                    ,[close_fees]
                    ,[close_fees_max]
                    ,[close_fees_min]
                    ,[management_fees]
                    ,[management_fees_max]
                    ,[management_fees_min]
                    ,[management_fees_freq]
                    ,[overdraft_fees]
                    ,[overdraft_fees_max]
                    ,[overdraft_fees_min]
                    ,[agio_fees]
                    ,[agio_fees_max]
                    ,[agio_fees_min]
                    ,[agio_fees_freq]
                    ,[cheque_deposit_min]
                    ,[cheque_deposit_max]
                    ,[cheque_deposit_fees]
                    ,[cheque_deposit_fees_min]
                    ,[cheque_deposit_fees_max]
                    ,[reopen_fees]
                    ,[reopen_fees_min]
                    ,[reopen_fees_max]
              )
              VALUES 
              (
                    @id,
                    @interestBase,
                    @interestFrequency,
                    @calculAmountBase,
                    @withdrawFeesType,
                    @flatWithdrawFeesMin,
                    @flatWithdrawFeesMax,
                    @flatWithdrawFees,
                    @rateWithdrawFeesMin,
                    @rateWithdrawFeesMax,
                    @rateWithdrawFees,
                    @transferFeesType,
                    @flatTransferFeesMin,
                    @flatTransferFeesMax,
                    @flatTransferFees,
                    @rateTransferFeesMin,
                    @rateTransferFeesMax,
                    @rateTransferFees,
                    @depositFees,
                    @depositFeesMax, 
                    @depositFeesMin, 
                    @closeFees, 
                    @closeFeesMax, 
                    @closeFeesMin, 
                    @managementFees, 
                    @managementFeesMax, 
                    @managementFeesMin, 
                    @management_fees_freq,
                    @overdraftFees, 
                    @overdraftFeesMax, 
                    @overdraftFeesMin, 
                    @agioFees, 
                    @agioFeesMax, 
                    @agioFeesMin, 
                    @agioFeesFreq,
                    @chequeDepositMin,
                    @chequeDepositMax,
                    @chequeDepositFees,
                    @chequeDepositFeesMin,
                    @chequeDepositFeesMax,
                    @reopenFees,
                    @reopenFeesMin,
                    @reopenFeesMax
                )";
                
            using (SqlCommand insertPackage = new SqlCommand(sqlText, DefaultConnection))
            {
                DatabaseHelper.InsertInt32Param("@id", insertPackage, pProduct.Id);

                SetProduct(insertPackage, pProduct);
                insertPackage.ExecuteScalar();
            }
        }

        private void AddTermDepositProduct(TermDepositProduct pProduct)
        {
            const string sqlText = @"INSERT INTO [TermDepositProducts] ([id],[installment_types_id],[number_period],[number_period_min],[number_period_max],[interest_frequency],
                [withdrawal_fees_type],[withdrawal_fees],[withdrawal_fees_min],[withdrawal_fees_max])
                VALUES (@id,@installmentTypesId,@numberPeriod,@numberPeriodMin,@numberPeriodMax,@interestFrequency,@withdrawalFeesType,@withdrawalFees,@withdrawalFeesMin,@withdrawalFeesMax)";

            using (SqlCommand insertPackage = new SqlCommand(sqlText, DefaultConnection))
            {
                DatabaseHelper.InsertInt32Param("@id", insertPackage, pProduct.Id);

                SetProduct(insertPackage, pProduct);
                insertPackage.ExecuteScalar();
            }
        }

        /*private void AddCompulsorySavingsProduct(CompulsorySavingsProduct pProduct)
        {
            const string sqlText = @"INSERT INTO [CompulsorySavingsProducts] ([id],[loan_amount_min],[loan_amount_max] ,[loan_amount])
                                   VALUES(@id,@loanAmountMin,@loanAmountMax,@loanAmount)";

            using (SqlCommand insertProduct = new SqlCommand(sqlText, DefaultConnection))
            {
                DatabaseHelper.InsertInt32Param("@id", insertProduct, pProduct.Id);

                SetProduct(insertProduct, pProduct);
                insertProduct.ExecuteScalar();
            }
        }*/

        private void UpdateBookProduct(SavingBookProduct product, bool inUse)
        {
            string query = @"UPDATE [SavingBookProducts] SET 
            [flat_withdraw_fees_min] = @flatWithdrawFeesMin, 
            [flat_withdraw_fees_max] = @flatWithdrawFeesMax, 
            [flat_withdraw_fees] = @flatWithdrawFees, 
            [rate_withdraw_fees_min] = @rateWithdrawFeesMin, 
            [rate_withdraw_fees_max] = @rateWithdrawFeesMax, 
            [rate_withdraw_fees] = @rateWithdrawFees,
            [flat_transfer_fees_min] = @flatTransferFeesMin, 
            [flat_transfer_fees_max] = @flatTransferFeesMax, 
            [flat_transfer_fees] = @flatTransferFees, 
            [rate_transfer_fees_min] = @rateTransferFeesMin, 
            [rate_transfer_fees_max] = @rateTransferFeesMax, 
            [rate_transfer_fees] = @rateTransferFees,
            [deposit_fees_max] = @depositFeesMax, 
            [deposit_fees_min] = @depositFeesMin,
            [deposit_fees] = @depositFees,
            [close_fees_max] = @closeFeesMax, 
            [close_fees_min] = @closeFeesMin, 
            [close_fees] = @closeFees,
            [management_fees_max] = @managementFeesMax, 
            [management_fees_min] = @managementFeesMin, 
            [management_fees] = @managementFees,
            [management_fees_freq] = @management_fees_freq,
            [overdraft_fees_max] = @overdraftFeesMax, 
            [overdraft_fees_min] = @overdraftFeesMin, 
            [overdraft_fees] = @overdraftFees,
            [agio_fees_max] = @agioFeesMax, 
            [agio_fees_min] = @agioFeesMin, 
            [agio_fees] = @agioFees,
            [agio_fees_freq] = @agioFeesFreq,
            [cheque_deposit_min]=@chequeDepositMin,
            [cheque_deposit_max]=@chequeDepositMax,
            [cheque_deposit_fees]=@chequeDepositFees,
            [cheque_deposit_fees_min]=@chequeDepositFeesMin,
            [cheque_deposit_fees_max]=@chequeDepositFeesMax,
            [reopen_fees] = @reopenFees,
            [reopen_fees_min] = @reopenFeesMin,
            [reopen_fees_max] = @reopenFeesMax
            {0}
            WHERE id = @productId";

            const string queryNew = @", 
            [interest_base] = @interestBase,
            [interest_frequency] = @interestFrequency,
            [calcul_amount_base] = @calculAmountBase, 
            [withdraw_fees_type] = @withdrawFeesType,
            [transfer_fees_type] = @transferFeesType";

            query = string.Format(query, inUse ? "" : queryNew);
            using (SqlCommand cmd = new SqlCommand(query, DefaultConnection))
            {
                SetProduct(cmd, product);
                cmd.ExecuteNonQuery();
            }
        }

        private void UpdateTermDepositProduct(TermDepositProduct pProduct, bool pProductAlreadyUsed)
        {
            const string sqlText = @"UPDATE [TermDepositProducts] SET 
                [withdrawal_fees_type] = @withdrawalFeesType,
                [withdrawal_fees] = @withdrawalFees, [withdrawal_fees_min] = @withdrawalFeesMin,
                [withdrawal_fees_max] = @withdrawalFeesMax
                {0}
                WHERE id = @productId";

            const string sqlTextProductIsUsed = @",[installment_types_id] = @installmentTypesId, [number_period] = @numberPeriod,
                                                   [number_period_min] = @numberPeriodMin, [number_period_max] = @numberPeriodMax,
                                                    [interest_frequency] = @interestFrequency";

            using (SqlCommand updateProduct = new SqlCommand(string.Format(sqlText, pProductAlreadyUsed ? "" : sqlTextProductIsUsed) , DefaultConnection))
            {
                SetProduct(updateProduct, pProduct);
                updateProduct.ExecuteNonQuery();
            }
        }

        /*private void UpdateCompulsorySavingsProduct(CompulsorySavingsProduct pProduct)
        {
            const string sqlText = @"UPDATE [CompulsorySavingsProducts] SET
                                   [loan_amount_min] = @loanAmountMin,
                                   [loan_amount_max] = @loanAmountMax,
                                   [loan_amount] = @loanAmount
                                   WHERE id = @productId";

            using (SqlCommand updateProduct = new SqlCommand(sqlText, DefaultConnection))
            {
                SetProduct(updateProduct, pProduct);
                updateProduct.ExecuteNonQuery();
            }
        }*/

        public void UpdateExistingSavingBooksContracts(ISavingProduct pProduct)
        {
            bool isItTheFirstStatement=true;
            string updateInterestRate="";
            List<int> contractsId=new List<int>();
            SavingBookProduct savingBookProduct = (SavingBookProduct) pProduct;
            int savingProductId = savingBookProduct.Id;
            string selectContractsId =
                string.Format(
                    @"SELECT id
                      FROM [dbo].[SavingContracts]
                      WHERE product_id=@product_id");
            using (SqlCommand cmd=new SqlCommand(selectContractsId,DefaultConnection))
            {
                DatabaseHelper.InsertInt32Param("@product_id", cmd, savingProductId);
                using (SqlDataReader dataReader = cmd.ExecuteReader())
                {
                    while (dataReader.Read())
                    {
                        contractsId.Add((int)dataReader[0]);
                    }
                }
            }

            string updateExistingContractsSql = @"UPDATE [dbo].[SavingBookContracts]
                                                  SET id=@id ";
            
            if (savingBookProduct.ManagementFees.HasValue)
                updateExistingContractsSql += ",[flat_management_fees]=@managment_fees";

            if (savingBookProduct.CloseFees.HasValue)
                updateExistingContractsSql += ",[flat_close_fees]=@close_fees";
                
            if (savingBookProduct.DepositFees.HasValue)
                updateExistingContractsSql += ",[flat_deposit_fees]=@deposit_fees";
                
            if (savingBookProduct.FlatWithdrawFees.HasValue)
                updateExistingContractsSql += ",[flat_withdraw_fees]=@flat_withdraw_fees";
                
            if (savingBookProduct.FlatTransferFees.HasValue)
                updateExistingContractsSql += ",[flat_transfer_fees]=@flat_transfer_fees";

            if (savingBookProduct.AgioFees.HasValue)
                updateExistingContractsSql += ",[rate_agio_fees]=@rate_agio_fees";

            if (savingBookProduct.ChequeDepositFees.HasValue)
                updateExistingContractsSql += ",[cheque_deposit_fees]=@cheque_deposit_fees";

            if (savingBookProduct.OverdraftFees.HasValue)
                updateExistingContractsSql += ",[flat_overdraft_fees]=@flat_overdraft_fees";
                
            updateExistingContractsSql += " WHERE id=@id";

            foreach (int contractId in contractsId)
            {
                using (SqlCommand updateContracts = new SqlCommand(updateExistingContractsSql, DefaultConnection))
                {
                    DatabaseHelper.InsertInt32Param("@id", updateContracts, contractId);
                    if (savingBookProduct.ManagementFees.HasValue)
                        DatabaseHelper.InsertMoneyParam("@managment_fees", updateContracts, savingBookProduct.ManagementFees.Value);
                    if (savingBookProduct.CloseFees.HasValue)
                        DatabaseHelper.InsertMoneyParam("@close_fees", updateContracts, savingBookProduct.CloseFees.Value);
                    if (savingBookProduct.DepositFees.HasValue)
                        DatabaseHelper.InsertMoneyParam("@deposit_fees", updateContracts, savingBookProduct.DepositFees.Value);
                    if (savingBookProduct.FlatWithdrawFees.HasValue)
                        DatabaseHelper.InsertMoneyParam("@flat_withdraw_fees", updateContracts, savingBookProduct.FlatWithdrawFees.Value);
                    if (savingBookProduct.FlatTransferFees.HasValue)
                        DatabaseHelper.InsertMoneyParam("@flat_transfer_fees", updateContracts, savingBookProduct.FlatTransferFees.Value);
                    if (savingBookProduct.AgioFees.HasValue)
                        DatabaseHelper.InsertDoubleParam("@rate_agio_fees", updateContracts, savingBookProduct.AgioFees.Value);
                    if (savingBookProduct.OverdraftFees.HasValue)
                        DatabaseHelper.InsertMoneyParam("@flat_overdraft_fees", updateContracts, savingBookProduct.OverdraftFees.Value);
                    if (savingBookProduct.ChequeDepositFees.HasValue)
                        DatabaseHelper.InsertMoneyParam("@cheque_deposit_fees", updateContracts, savingBookProduct.ChequeDepositFees);
                    updateContracts.ExecuteNonQuery();
                }
                
                if (savingBookProduct.InterestRate.HasValue)
                {
                    updateInterestRate = @"UPDATE [dbo].[SavingContracts] SET [interest_rate]=@interest_rate
                                           WHERE id=@id";
                    using (SqlCommand updateInterestRates = new SqlCommand(updateInterestRate,DefaultConnection))
                    {
                        DatabaseHelper.InsertInt32Param("@id", updateInterestRates, contractId);
                        DatabaseHelper.InsertDoubleParam("@interest_rate", updateInterestRates,
                                                            savingBookProduct.InterestRate);
                        updateInterestRates.ExecuteNonQuery();
                    }
                }
            }
        }

        public void Update(ISavingProduct pProduct)
        {
            const string sqlText = @"UPDATE [SavingProducts] SET  
                [initial_amount_min] = @initialAmountMin
                , [initial_amount_max] = @initialAmountMax
                , [balance_min] = @balanceMin
                , [balance_max] = @balanceMax
                , [deposit_min] = @depositMin
                , [deposit_max] = @depositMax
                , [withdraw_min] = @withdrawMin
                , [withdraw_max] = @withdrawMax
                , [transfer_min] = @transferMin
                , [transfer_max] = @transferMax
                , [interest_rate] = @interestRate
                , [interest_rate_min] = @interestRateMin
                , [interest_rate_max] = @interestRateMax
                , [entry_fees] = @entryFees
                , [entry_fees_max] = @entryFeesMax
                , [entry_fees_min] = @entryFeesMin
                {0}
                WHERE id = @productId";

            const string sqlTextProductNotUsed = @",[client_type] = @clientType, [name] = @name, [code] = @code, [currency_id] = @currency_id";

            bool productAlreadyUsed = IsThisProductAlreadyUsed(pProduct.Id);

            using (SqlCommand updateProduct = new SqlCommand(string.Format(sqlText, productAlreadyUsed ? "" : sqlTextProductNotUsed), DefaultConnection))
            {
                SetProduct(updateProduct, pProduct);
                updateProduct.ExecuteNonQuery();
            }

            if (pProduct is SavingBookProduct)
            {
                UpdateBookProduct((SavingBookProduct)pProduct, productAlreadyUsed);
                DeleteAssignedClientTypes(pProduct.Id);
                AssignClientTypes(((SavingBookProduct)pProduct).ProductClientTypes, pProduct.Id);
            }
            else if (pProduct is TermDepositProduct)
            {
                UpdateTermDepositProduct((TermDepositProduct)pProduct, productAlreadyUsed);
                DeleteAssignedClientTypes(pProduct.Id);
                AssignClientTypes(((TermDepositProduct)pProduct).ProductClientTypes, pProduct.Id);
            }
            /*else if (pProduct is CompulsorySavingsProduct)
            {
                UpdateCompulsorySavingsProduct((CompulsorySavingsProduct)pProduct);
                DeleteAssignedClientTypes(pProduct.Id);
                AssignClientTypes(((CompulsorySavingsProduct)pProduct).ProductClientTypes, pProduct.Id);
            }*/
        }

        public bool IsThisProductAlreadyUsed(int pProductId)
        {
            const string sqlText = "SELECT id FROM SavingContracts WHERE product_id = @id";
            using (SqlCommand command = new SqlCommand(sqlText, DefaultConnection))
            {
                DatabaseHelper.InsertInt32Param("@id", command, pProductId);
                using (SqlDataReader reader = command.ExecuteReader())
                {
                    return reader != null && reader.HasRows;
                }
            }
        }

        /// <summary>
        /// Look if selected product name already exist in database
        /// </summary>
        /// <param name="pSavingProductName"></param>
        /// <returns>true or false</returns>
        public bool IsThisProductNameAlreadyExist(string pSavingProductName)
        {
            const string sqlText = "SELECT name FROM SavingProducts WHERE name = @name";
            using(SqlCommand command = new SqlCommand(sqlText, DefaultConnection))
            {
                DatabaseHelper.InsertStringNVarCharParam("@name", command, pSavingProductName);
                using (SqlDataReader reader = command.ExecuteReader())
                {
                    return reader != null && reader.HasRows;
                }
            }
        }

        public bool IsThisProductCodeAlreadyExist(string pSavingProductCode)
        {
            const string sqlText = "SELECT code FROM SavingProducts WHERE code = @code";
            using (SqlCommand command = new SqlCommand(sqlText, DefaultConnection))
            {
                DatabaseHelper.InsertStringNVarCharParam("@code", command, pSavingProductCode);
                using (SqlDataReader reader = command.ExecuteReader())
                {
                    return reader != null && reader.HasRows;
                }
            } 
        }

        private static ISavingProduct GetProduct(SqlDataReader pReader)
        {
            ISavingProduct product;
            
            switch (DatabaseHelper.GetChar("product_type", pReader))
            {
                case 'B' : product = new SavingBookProduct(); break;
                case 'T' : product = new TermDepositProduct(); break;
                //case 'C' : product = new CompulsorySavingsProduct(); break;
                default : product = null; break;
            }

            product.Id = DatabaseHelper.GetInt32("id", pReader);
            product.Delete = DatabaseHelper.GetBoolean("deleted", pReader);
            product.Name = DatabaseHelper.GetString("name", pReader);
            product.Code = DatabaseHelper.GetString("code", pReader);

            product.ClientType = DatabaseHelper.GetChar("client_type", pReader) == 'C' ? OClientTypes.Corporate
                                 : DatabaseHelper.GetChar("client_type", pReader) == 'G' ? OClientTypes.Group
                                 : DatabaseHelper.GetChar("client_type", pReader) == 'I' ? OClientTypes.Person 
                                 : OClientTypes.Both;

            product.InitialAmountMin = DatabaseHelper.GetMoney("initial_amount_min", pReader);
            product.InitialAmountMax = DatabaseHelper.GetMoney("initial_amount_max", pReader);
            product.BalanceMin = DatabaseHelper.GetNullAuthorizedMoney("balance_min", pReader);
            product.BalanceMax = DatabaseHelper.GetNullAuthorizedMoney("balance_max", pReader);
            product.DepositMin = DatabaseHelper.GetNullAuthorizedMoney("deposit_min", pReader);
            product.DepositMax = DatabaseHelper.GetNullAuthorizedMoney("deposit_max", pReader);
            product.WithdrawingMin = DatabaseHelper.GetNullAuthorizedMoney("withdraw_min", pReader);
            product.WithdrawingMax = DatabaseHelper.GetNullAuthorizedMoney("withdraw_max", pReader);
            product.TransferMin = DatabaseHelper.GetMoney("transfer_min", pReader);
            product.TransferMax = DatabaseHelper.GetMoney("transfer_max", pReader);
            product.InterestRate = DatabaseHelper.GetNullAuthorizedDouble("interest_rate", pReader);
            product.InterestRateMin = DatabaseHelper.GetNullAuthorizedDouble("interest_rate_min", pReader);
            product.InterestRateMax = DatabaseHelper.GetNullAuthorizedDouble("interest_rate_max", pReader);
            product.EntryFees = DatabaseHelper.GetNullAuthorizedMoney("entry_fees", pReader);
            product.EntryFeesMax = DatabaseHelper.GetNullAuthorizedMoney("entry_fees_max", pReader);
            product.EntryFeesMin = DatabaseHelper.GetNullAuthorizedMoney("entry_fees_min", pReader);
           
            if (product is SavingBookProduct)
            {
                ((SavingBookProduct)product).InterestBase = (OSavingInterestBase)DatabaseHelper.GetSmallInt("interest_base", pReader);
                ((SavingBookProduct)product).InterestFrequency = (OSavingInterestFrequency)DatabaseHelper.GetSmallInt("interest_frequency", pReader);

                if (((SavingBookProduct)product).InterestBase == OSavingInterestBase.Monthly || ((SavingBookProduct)product).InterestBase == OSavingInterestBase.Weekly)
                    ((SavingBookProduct)product).CalculAmountBase = (OSavingCalculAmountBase)DatabaseHelper.GetSmallInt("calcul_amount_base", pReader);

                ((SavingBookProduct)product).WithdrawFeesType = (OSavingsFeesType)DatabaseHelper.GetSmallInt("withdraw_fees_type", pReader);
                if (((SavingBookProduct)product).WithdrawFeesType == OSavingsFeesType.Flat)
                {
                    ((SavingBookProduct)product).FlatWithdrawFeesMin = DatabaseHelper.GetNullAuthorizedMoney("flat_withdraw_fees_min", pReader);
                    ((SavingBookProduct)product).FlatWithdrawFeesMax = DatabaseHelper.GetNullAuthorizedMoney("flat_withdraw_fees_max", pReader);
                    ((SavingBookProduct)product).FlatWithdrawFees = DatabaseHelper.GetNullAuthorizedMoney("flat_withdraw_fees", pReader);
                }
                else
                {
                    ((SavingBookProduct)product).RateWithdrawFeesMin = DatabaseHelper.GetNullAuthorizedDouble("rate_withdraw_fees_min", pReader);
                    ((SavingBookProduct)product).RateWithdrawFeesMax = DatabaseHelper.GetNullAuthorizedDouble("rate_withdraw_fees_max", pReader);
                    ((SavingBookProduct)product).RateWithdrawFees = DatabaseHelper.GetNullAuthorizedDouble("rate_withdraw_fees", pReader);
                }

                ((SavingBookProduct)product).TransferFeesType = (OSavingsFeesType)DatabaseHelper.GetSmallInt("transfer_fees_type", pReader);
                if (((SavingBookProduct)product).TransferFeesType == OSavingsFeesType.Flat)
                {
                    ((SavingBookProduct)product).FlatTransferFeesMin = DatabaseHelper.GetNullAuthorizedMoney("flat_transfer_fees_min", pReader);
                    ((SavingBookProduct)product).FlatTransferFeesMax = DatabaseHelper.GetNullAuthorizedMoney("flat_transfer_fees_max", pReader);
                    ((SavingBookProduct)product).FlatTransferFees = DatabaseHelper.GetNullAuthorizedMoney("flat_transfer_fees", pReader);
                }
                else
                {
                    ((SavingBookProduct)product).RateTransferFeesMin = DatabaseHelper.GetNullAuthorizedDouble("rate_transfer_fees_min", pReader);
                    ((SavingBookProduct)product).RateTransferFeesMax = DatabaseHelper.GetNullAuthorizedDouble("rate_transfer_fees_max", pReader);
                    ((SavingBookProduct)product).RateTransferFees = DatabaseHelper.GetNullAuthorizedDouble("rate_transfer_fees", pReader);
                }

                ((SavingBookProduct)product).DepositFees = DatabaseHelper.GetNullAuthorizedMoney("deposit_fees", pReader);
                ((SavingBookProduct)product).DepositFeesMax = DatabaseHelper.GetNullAuthorizedMoney("deposit_fees_max", pReader);
                ((SavingBookProduct)product).DepositFeesMin = DatabaseHelper.GetNullAuthorizedMoney("deposit_fees_min", pReader);

                ((SavingBookProduct) product).ChequeDepositMin =
                    DatabaseHelper.GetNullAuthorizedMoney("cheque_deposit_min", pReader);
                ((SavingBookProduct) product).ChequeDepositMax =
                    DatabaseHelper.GetNullAuthorizedMoney("cheque_deposit_max", pReader);
                ((SavingBookProduct) product).ChequeDepositFees =
                    DatabaseHelper.GetNullAuthorizedMoney("cheque_deposit_fees", pReader);
                ((SavingBookProduct) product).ChequeDepositFeesMin =
                    DatabaseHelper.GetNullAuthorizedMoney("cheque_deposit_fees_min", pReader);
                ((SavingBookProduct) product).ChequeDepositFeesMax =
                    DatabaseHelper.GetNullAuthorizedMoney("cheque_deposit_fees_max", pReader);

                ((SavingBookProduct)product).CloseFees = DatabaseHelper.GetNullAuthorizedMoney("close_fees", pReader);
                ((SavingBookProduct)product).CloseFeesMax = DatabaseHelper.GetNullAuthorizedMoney("close_fees_max", pReader);
                ((SavingBookProduct)product).CloseFeesMin = DatabaseHelper.GetNullAuthorizedMoney("close_fees_min", pReader);

                ((SavingBookProduct)product).ManagementFees = DatabaseHelper.GetNullAuthorizedMoney("management_fees", pReader);
                ((SavingBookProduct)product).ManagementFeesMax = DatabaseHelper.GetNullAuthorizedMoney("management_fees_max", pReader);
                ((SavingBookProduct)product).ManagementFeesMin = DatabaseHelper.GetNullAuthorizedMoney("management_fees_min", pReader);

                ((SavingBookProduct) product).ManagementFeeFreq = new InstallmentType
                {
                    Id = DatabaseHelper.GetInt32("mgmt_fee_freq_id", pReader),
                    Name = DatabaseHelper.GetString("mgmt_fee_freq_name", pReader),
                    NbOfDays = DatabaseHelper.GetInt32("mgmt_fee_freq_days", pReader),
                    NbOfMonths = DatabaseHelper.GetInt32("mgmt_fee_freq_months", pReader)   
                };

                ((SavingBookProduct)product).OverdraftFees = DatabaseHelper.GetNullAuthorizedMoney("overdraft_fees", pReader);
                ((SavingBookProduct)product).OverdraftFeesMax = DatabaseHelper.GetNullAuthorizedMoney("overdraft_fees_max", pReader);
                ((SavingBookProduct)product).OverdraftFeesMin = DatabaseHelper.GetNullAuthorizedMoney("overdraft_fees_min", pReader);

                ((SavingBookProduct)product).AgioFees = DatabaseHelper.GetNullAuthorizedDouble("agio_fees", pReader);
                ((SavingBookProduct)product).AgioFeesMax = DatabaseHelper.GetNullAuthorizedDouble("agio_fees_max", pReader);
                ((SavingBookProduct)product).AgioFeesMin = DatabaseHelper.GetNullAuthorizedDouble("agio_fees_min", pReader);

                ((SavingBookProduct)product).AgioFeesFreq = new InstallmentType
                {
                    Id = DatabaseHelper.GetInt32("agio_fees_freq_id", pReader),
                    Name =  DatabaseHelper.GetString("agio_fees_freq_name", pReader),
                    NbOfDays =  DatabaseHelper.GetInt32("agio_fees_freq_days", pReader),
                    NbOfMonths = DatabaseHelper.GetInt32("agio_fees_freq_months", pReader)
                };

                ((SavingBookProduct)product).ReopenFees = DatabaseHelper.GetNullAuthorizedMoney("reopen_fees", pReader);
                ((SavingBookProduct)product).ReopenFeesMin = DatabaseHelper.GetNullAuthorizedMoney("reopen_fees_min", pReader);
                ((SavingBookProduct)product).ReopenFeesMax = DatabaseHelper.GetNullAuthorizedMoney("reopen_fees_max", pReader);
            }
            else if (product is TermDepositProduct)
            {
                ((TermDepositProduct)product).Periodicity = new InstallmentType
                {
                    Id = DatabaseHelper.GetInt32("installment_types_id", pReader),
                    Name = DatabaseHelper.GetString("installment_types_name", pReader),
                    NbOfDays = DatabaseHelper.GetInt32("installment_types_days", pReader),
                    NbOfMonths = DatabaseHelper.GetInt32("installment_types_months", pReader)
                };

                ((TermDepositProduct)product).NumberPeriod = DatabaseHelper.GetNullAuthorizedInt32("number_period", pReader);
                ((TermDepositProduct)product).NumberPeriodMin = DatabaseHelper.GetNullAuthorizedInt32("number_period_min", pReader);
                ((TermDepositProduct)product).NumberPeriodMax = DatabaseHelper.GetNullAuthorizedInt32("number_period_max", pReader);
                ((TermDepositProduct)product).InterestFrequency = (OTermDepositInterestFrequency)DatabaseHelper.GetSmallInt("interest_frequency", pReader);

                ((TermDepositProduct)product).WithdrawalFeesType = (OTermDepositFeesType)DatabaseHelper.GetSmallInt("withdrawal_fees_type", pReader);
                ((TermDepositProduct)product).WithdrawalFees = DatabaseHelper.GetNullAuthorizedDouble("withdrawal_fees", pReader);
                ((TermDepositProduct)product).WithdrawalFeesMin = DatabaseHelper.GetNullAuthorizedDouble("withdrawal_fees_min", pReader);
                ((TermDepositProduct)product).WithdrawalFeesMax = DatabaseHelper.GetNullAuthorizedDouble("withdrawal_fees_max", pReader); 
            }
            /*else if (product is CompulsorySavingsProduct)
            {
                ((CompulsorySavingsProduct)product).LoanAmountMin = DatabaseHelper.GetNullAuthorizedDouble("loan_amount_min", pReader);
                ((CompulsorySavingsProduct)product).LoanAmountMax = DatabaseHelper.GetNullAuthorizedDouble("loan_amount_max", pReader);
                ((CompulsorySavingsProduct)product).LoanAmount = DatabaseHelper.GetNullAuthorizedDouble("loan_amount", pReader);
            }*/
            
            if (DatabaseHelper.GetNullAuthorizedInt32("currency_id", pReader).HasValue)
            {
                product.Currency = new Currency
                {
                    Id = DatabaseHelper.GetInt32("currency_id", pReader),
                    Code = DatabaseHelper.GetString("currency_code", pReader),
                    Name = DatabaseHelper.GetString("currency_name", pReader),
                    IsPivot = DatabaseHelper.GetBoolean("currency_is_pivot", pReader),
                    IsSwapped = DatabaseHelper.GetBoolean("currency_is_swapped", pReader),
                    UseCents = DatabaseHelper.GetBoolean("currency_use_cents", pReader)
                };
            }

            return product;
        }

        private static void SetProduct(SqlCommand pSqlCommand, ISavingProduct pProduct)
        {
            DatabaseHelper.InsertBooleanParam("@deleted", pSqlCommand, pProduct.Delete);
            DatabaseHelper.InsertStringNVarCharParam("@name", pSqlCommand, pProduct.Name);
            DatabaseHelper.InsertStringNVarCharParam("@code", pSqlCommand, pProduct.Code);

            if (pProduct.ClientType == OClientTypes.Corporate)
                DatabaseHelper.InsertCharParam("@clientType", pSqlCommand, 'C');
            else if (pProduct.ClientType == OClientTypes.Group)
                DatabaseHelper.InsertCharParam("@clientType", pSqlCommand, 'G');
            else if (pProduct.ClientType == OClientTypes.Person)
                DatabaseHelper.InsertCharParam("@clientType", pSqlCommand, 'I');
            else
                DatabaseHelper.InsertCharParam("@clientType", pSqlCommand, '-');

            DatabaseHelper.InsertMoneyParam("@initialAmountMin", pSqlCommand, pProduct.InitialAmountMin);
            DatabaseHelper.InsertMoneyParam("@initialAmountMax", pSqlCommand, pProduct.InitialAmountMax);

            DatabaseHelper.InsertMoneyParam("@balanceMin", pSqlCommand, pProduct.BalanceMin);
            DatabaseHelper.InsertMoneyParam("@balanceMax", pSqlCommand, pProduct.BalanceMax);

            DatabaseHelper.InsertMoneyParam("@depositMin", pSqlCommand, pProduct.DepositMin);
            DatabaseHelper.InsertMoneyParam("@depositMax", pSqlCommand, pProduct.DepositMax);

            DatabaseHelper.InsertMoneyParam("@withdrawMin", pSqlCommand, pProduct.WithdrawingMin);
            DatabaseHelper.InsertMoneyParam("@withdrawMax", pSqlCommand, pProduct.WithdrawingMax);

            DatabaseHelper.InsertMoneyParam("@transferMin", pSqlCommand, pProduct.TransferMin);
            DatabaseHelper.InsertMoneyParam("@transferMax", pSqlCommand, pProduct.TransferMax);

            DatabaseHelper.InsertDoubleParam("@interestRate", pSqlCommand, pProduct.InterestRate);
            DatabaseHelper.InsertDoubleParam("@interestRateMin", pSqlCommand, pProduct.InterestRateMin);
            DatabaseHelper.InsertDoubleParam("@interestRateMax", pSqlCommand, pProduct.InterestRateMax);
          
            DatabaseHelper.InsertMoneyParam("@entryFees", pSqlCommand, pProduct.EntryFees);
            DatabaseHelper.InsertMoneyParam("@entryFeesMax", pSqlCommand, pProduct.EntryFeesMax);
            DatabaseHelper.InsertMoneyParam("@entryFeesMin", pSqlCommand, pProduct.EntryFeesMin);

            DatabaseHelper.InsertInt32Param("@productId", pSqlCommand, pProduct.Id);
            DatabaseHelper.InsertInt32Param("@currency_id", pSqlCommand, pProduct.Currency.Id);
        }

        private static void SetProduct(SqlCommand pSqlCommand, SavingBookProduct pProduct)
        {
            DatabaseHelper.InsertSmalIntParam("@interestBase", pSqlCommand, (int)pProduct.InterestBase);
            DatabaseHelper.InsertSmalIntParam("@interestFrequency", pSqlCommand, (int)pProduct.InterestFrequency);
            DatabaseHelper.InsertSmalIntParam("@calculAmountBase", pSqlCommand,  pProduct.CalculAmountBase.HasValue ? (int)pProduct.CalculAmountBase.Value : 0);
            DatabaseHelper.InsertInt32Param("@productId", pSqlCommand, pProduct.Id);

            DatabaseHelper.InsertSmalIntParam("@withdrawFeesType", pSqlCommand, (int)pProduct.WithdrawFeesType);
            DatabaseHelper.InsertMoneyParam("@flatWithdrawFeesMin", pSqlCommand, pProduct.WithdrawFeesType == OSavingsFeesType.Flat ? pProduct.FlatWithdrawFeesMin : null);
            DatabaseHelper.InsertMoneyParam("@flatWithdrawFeesMax", pSqlCommand, pProduct.WithdrawFeesType == OSavingsFeesType.Flat ? pProduct.FlatWithdrawFeesMax : null);
            DatabaseHelper.InsertMoneyParam("@flatWithdrawFees", pSqlCommand, pProduct.WithdrawFeesType == OSavingsFeesType.Flat ? pProduct.FlatWithdrawFees : null);
            DatabaseHelper.InsertDoubleParam("@rateWithdrawFeesMin", pSqlCommand, pProduct.WithdrawFeesType == OSavingsFeesType.Rate ? pProduct.RateWithdrawFeesMin : null);
            DatabaseHelper.InsertDoubleParam("@rateWithdrawFeesMax", pSqlCommand, pProduct.WithdrawFeesType == OSavingsFeesType.Rate ? pProduct.RateWithdrawFeesMax : null);
            DatabaseHelper.InsertDoubleParam("@rateWithdrawFees", pSqlCommand, pProduct.WithdrawFeesType == OSavingsFeesType.Rate ? pProduct.RateWithdrawFees : null);

            DatabaseHelper.InsertSmalIntParam("@transferFeesType", pSqlCommand, (int)pProduct.TransferFeesType);
            DatabaseHelper.InsertMoneyParam("@flatTransferFeesMin", pSqlCommand, pProduct.TransferFeesType == OSavingsFeesType.Flat ? pProduct.FlatTransferFeesMin : null);
            DatabaseHelper.InsertMoneyParam("@flatTransferFeesMax", pSqlCommand, pProduct.TransferFeesType == OSavingsFeesType.Flat ? pProduct.FlatTransferFeesMax : null);
            DatabaseHelper.InsertMoneyParam("@flatTransferFees", pSqlCommand, pProduct.TransferFeesType == OSavingsFeesType.Flat ? pProduct.FlatTransferFees : null);
            DatabaseHelper.InsertDoubleParam("@rateTransferFeesMin", pSqlCommand, pProduct.TransferFeesType == OSavingsFeesType.Rate ? pProduct.RateTransferFeesMin : null);
            DatabaseHelper.InsertDoubleParam("@rateTransferFeesMax", pSqlCommand, pProduct.TransferFeesType == OSavingsFeesType.Rate ? pProduct.RateTransferFeesMax : null);
            DatabaseHelper.InsertDoubleParam("@rateTransferFees", pSqlCommand, pProduct.TransferFeesType == OSavingsFeesType.Rate ? pProduct.RateTransferFees : null);

            DatabaseHelper.InsertMoneyParam("@depositFeesMin", pSqlCommand, pProduct.DepositFeesMin);
            DatabaseHelper.InsertMoneyParam("@depositFeesMax", pSqlCommand, pProduct.DepositFeesMax);
            DatabaseHelper.InsertMoneyParam("@depositFees", pSqlCommand, pProduct.DepositFees);
            
            DatabaseHelper.InsertMoneyParam("@chequeDepositMin", pSqlCommand, pProduct.ChequeDepositMin);
            DatabaseHelper.InsertMoneyParam("@chequeDepositMax", pSqlCommand, pProduct.ChequeDepositMax);
            DatabaseHelper.InsertMoneyParam("@chequeDepositFees",pSqlCommand,pProduct.ChequeDepositFees);
            DatabaseHelper.InsertMoneyParam("@chequeDepositFeesMin",pSqlCommand,pProduct.ChequeDepositFeesMin);
            DatabaseHelper.InsertMoneyParam("@chequeDepositFeesMax",pSqlCommand,pProduct.ChequeDepositFeesMax);

            DatabaseHelper.InsertMoneyParam("@closeFeesMin", pSqlCommand, pProduct.CloseFeesMin);
            DatabaseHelper.InsertMoneyParam("@closeFeesMax", pSqlCommand, pProduct.CloseFeesMax);
            DatabaseHelper.InsertMoneyParam("@closeFees", pSqlCommand, pProduct.CloseFees);

            DatabaseHelper.InsertMoneyParam("@managementFeesMin", pSqlCommand, pProduct.ManagementFeesMin);
            DatabaseHelper.InsertMoneyParam("@managementFeesMax", pSqlCommand, pProduct.ManagementFeesMax);
            DatabaseHelper.InsertMoneyParam("@managementFees", pSqlCommand, pProduct.ManagementFees);
            DatabaseHelper.InsertMoneyParam("@management_fees_freq", pSqlCommand, pProduct.ManagementFeeFreq.Id);

            DatabaseHelper.InsertMoneyParam("@overdraftFeesMin", pSqlCommand, pProduct.OverdraftFeesMin);
            DatabaseHelper.InsertMoneyParam("@overdraftFeesMax", pSqlCommand, pProduct.OverdraftFeesMax);
            DatabaseHelper.InsertMoneyParam("@overdraftFees", pSqlCommand, pProduct.OverdraftFees);

            DatabaseHelper.InsertDoubleParam("@agioFeesMin", pSqlCommand, pProduct.AgioFeesMin);
            DatabaseHelper.InsertDoubleParam("@agioFeesMax", pSqlCommand, pProduct.AgioFeesMax);
            DatabaseHelper.InsertDoubleParam("@agioFees", pSqlCommand, pProduct.AgioFees);
            DatabaseHelper.InsertMoneyParam("@agioFeesFreq", pSqlCommand, pProduct.AgioFeesFreq.Id);

            DatabaseHelper.InsertMoneyParam("@reopenFeesMin", pSqlCommand, pProduct.ReopenFeesMin);
            DatabaseHelper.InsertMoneyParam("@reopenFeesMax", pSqlCommand, pProduct.ReopenFeesMax);
            DatabaseHelper.InsertMoneyParam("@reopenFees", pSqlCommand, pProduct.ReopenFees);
        }

        private static void SetProduct(SqlCommand pSqlCommand, TermDepositProduct pProduct)
        {
            DatabaseHelper.InsertInt32Param("@installmentTypesId", pSqlCommand, pProduct.Periodicity.Id);
            DatabaseHelper.InsertInt32Param("@numberPeriod", pSqlCommand, pProduct.NumberPeriod);
            DatabaseHelper.InsertInt32Param("@numberPeriodMin", pSqlCommand, pProduct.NumberPeriodMin);
            DatabaseHelper.InsertInt32Param("@numberPeriodMax", pSqlCommand, pProduct.NumberPeriodMax);
            DatabaseHelper.InsertSmalIntParam("@interestFrequency", pSqlCommand, (int)pProduct.InterestFrequency);
            DatabaseHelper.InsertInt32Param("@productId", pSqlCommand, pProduct.Id);

            DatabaseHelper.InsertSmalIntParam("@withdrawalFeesType", pSqlCommand, (int)pProduct.WithdrawalFeesType);
            DatabaseHelper.InsertDoubleParam("@withdrawalFees", pSqlCommand, pProduct.WithdrawalFees);
            DatabaseHelper.InsertDoubleParam("@withdrawalFeesMin", pSqlCommand, pProduct.WithdrawalFeesMin);
            DatabaseHelper.InsertDoubleParam("@withdrawalFeesMax", pSqlCommand, pProduct.WithdrawalFeesMax);
        }

        /*private static void SetProduct(SqlCommand pSqlCommand, CompulsorySavingsProduct pProduct)
        {
            DatabaseHelper.InsertDoubleParam("@loanAmountMin", pSqlCommand, pProduct.LoanAmountMin);
            DatabaseHelper.InsertDoubleParam("@loanAmountMax", pSqlCommand, pProduct.LoanAmountMax);
            DatabaseHelper.InsertDoubleParam("@loanAmount", pSqlCommand, pProduct.LoanAmount);
            DatabaseHelper.InsertInt32Param("@productId", pSqlCommand, pProduct.Id);
        }*/

        /// <summary>
        /// This method allows us to select a package from database.  We use the NullableTypes to make the correspondance between
        /// nullable int, decimal and double types in database and our own objects
        /// </summary>
        /// <param name="pProductId">id's of package searched</param>
        /// <returns>A package Object if id matches with datas in database, null if not</returns>
        public SavingBookProduct SelectBookProduct(int pProductId)
        {
            const string query = @"SELECT sav.*,
            prod.*, 
            cur.name AS currency_name, 
            cur.code AS currency_code,
            cur.is_pivot AS currency_is_pivot, 
            cur.is_swapped AS currency_is_swapped,
            cur.use_cents AS currency_use_cents,
            freq.id AS mgmt_fee_freq_id,
            freq.name AS mgmt_fee_freq_name,
            freq.nb_of_days AS mgmt_fee_freq_days,
            freq.nb_of_months AS mgmt_fee_freq_months,
            agio_freq.id AS agio_fees_freq_id,
            agio_freq.name AS agio_fees_freq_name,
            agio_freq.nb_of_days AS agio_fees_freq_days,
            agio_freq.nb_of_months AS agio_fees_freq_months
            FROM SavingProducts AS prod
            INNER JOIN SavingBookProducts AS sav ON prod.id = sav.id
            INNER JOIN Currencies AS cur ON prod.currency_id = cur.id
            LEFT JOIN InstallmentTypes AS freq ON sav.management_fees_freq = freq.id
            LEFT JOIN InstallmentTypes AS agio_freq ON sav.agio_fees_freq = agio_freq.id
            WHERE prod.id = @id";

            using(SqlCommand cmd = new SqlCommand(query, DefaultConnection))
            {
                DatabaseHelper.InsertInt32Param("@id", cmd, pProductId);

                using (SqlDataReader reader = cmd.ExecuteReader())
                {
                    if (reader == null || !reader.HasRows) return null;

                    reader.Read();
                    return (SavingBookProduct)GetProduct(reader);
                }
            }
        }

        /*public CompulsorySavingsProduct SelectCompulsoryProduct(int pProductId)
        {
            const string sqlText = @"SELECT SavingProducts.*,
                                    CompulsorySavingsProducts.*, 
                                    Currencies.name as currency_name, Currencies.code as currency_code,
                                    Currencies.is_pivot as currency_is_pivot, Currencies.is_swapped as currency_is_swapped,
                                    Currencies.use_cents as currency_use_cents
                                    FROM SavingProducts 
                                    INNER JOIN CompulsorySavingsProducts ON SavingProducts.id = CompulsorySavingsProducts.id
                                    INNER JOIN Currencies on SavingProducts.currency_id = Currencies.id 
                                    WHERE SavingProducts.id = @id";

            using (SqlCommand selectPackage = new SqlCommand(sqlText, DefaultConnection))
            {
                DatabaseHelper.InsertInt32Param("@id", selectPackage, pProductId);

                using (SqlDataReader reader = selectPackage.ExecuteReader())
                {
                    if (reader == null || !reader.HasRows) return null;

                    reader.Read();
                    return (CompulsorySavingsProduct)GetProduct(reader);
                }
            }
        }*/

        public TermDepositProduct SelectTermeDepositProduct(int pProductId)
        {
            const string sqlText = @"SELECT SavingProducts.*,
                                    TermDepositProducts.*, 
                                    Currencies.name as currency_name, Currencies.code as currency_code,
                                    Currencies.is_pivot as currency_is_pivot, Currencies.is_swapped as currency_is_swapped,
                                    Currencies.use_cents as currency_use_cents,
                                    InstallmentTypes.id as installment_types_id, InstallmentTypes.name as installment_types_name, 
                                    InstallmentTypes.nb_of_days as installment_types_days, InstallmentTypes.nb_of_months as installment_types_months
                                    FROM SavingProducts 
                                    INNER JOIN TermDepositProducts ON SavingProducts.id = TermDepositProducts.id
                                    INNER JOIN Currencies on SavingProducts.currency_id = Currencies.id 
                                    INNER JOIN InstallmentTypes on TermDepositProducts.installment_types_id = InstallmentTypes.id
                                    WHERE SavingProducts.id = @id";

            using (SqlCommand selectPackage = new SqlCommand(sqlText, DefaultConnection))
            {
                DatabaseHelper.InsertInt32Param("@id", selectPackage, pProductId);

                using (SqlDataReader reader = selectPackage.ExecuteReader())
                {
                    if (reader == null || !reader.HasRows) return null;

                    reader.Read();
                    return (TermDepositProduct)GetProduct(reader);
                }
            }
        }

        public List<ProductClientType> GetAllClientTypes()
        {
            List<ProductClientType> clientTypes = new List<ProductClientType>();
            string sqlText = @"SELECT [id], [type_name] 
                             FROM  [dbo].[ClientTypes]";
            using (SqlCommand cmd = new SqlCommand(sqlText, DefaultConnection))
            {
                using (SqlDataReader dataReader = cmd.ExecuteReader())
                {
                    while (dataReader.Read())
                    {
                        clientTypes.Add(new ProductClientType((int)dataReader[0], (string)dataReader[1]));
                    }
                }
            }
            return clientTypes;
        }

        public void GetProductAssignedClientTypes(List<ProductClientType> savingClientTypes, int productId)
        {
            foreach (ProductClientType clientType in savingClientTypes)
            {
                string sqlText = string.Format(
                    @"SELECT client_type_id, [saving_product_id]
                      FROM [dbo].[SavingProductsClientTypes]
                      WHERE client_type_id={0} AND [saving_product_id]={1}",
                      clientType.TypeId, productId);

                SqlCommand cmd = new SqlCommand(sqlText, DefaultConnection);
                SqlDataReader dataReader = cmd.ExecuteReader();
                if (dataReader.HasRows)
                {
                    clientType.IsChecked = true;
                }
                dataReader.Close();
            }
        }

        public ISavingProduct SelectSavingProduct(int pProductId)
        {
            const string sqlText = "SELECT product_type FROM SavingProducts WHERE id = @productId";

            using (SqlCommand selectPackage = new SqlCommand(sqlText, DefaultConnection))
            {
                DatabaseHelper.InsertInt32Param("@productId", selectPackage, pProductId);

                switch ((string)selectPackage.ExecuteScalar())
                {
                    case "B": return SelectBookProduct(pProductId);
                    case "T": return SelectTermeDepositProduct(pProductId);
                    //case "C": return SelectCompulsoryProduct(pProductId);
                    default: return null;
                }
            }
        }

        ///// <summary>
        ///// Select all packages in database
        ///// </summary>
        ///// <param name="pShowAlsoDeleted"></param>
        ///// <returns>a list contains all packages</returns>
        ///// <param name="pClientType"></param>
        public List<ISavingProduct> SelectProducts(bool pShowAlsoDeleted, OClientTypes pClientType)
        {
            List<ISavingProduct> productsList = new List<ISavingProduct>();

//            const string sqlTextForAllProduct = " OR SavingProducts.client_type = '-' )";
            string sqlText = @"SELECT DISTINCT [dbo].[SavingProducts].[id], 
                               [dbo].[SavingProducts].[product_type]
                               FROM [dbo].[SavingProducts]
                               INNER JOIN [dbo].[SavingProductsClientTypes] ON
                               [dbo].[SavingProductsClientTypes].[saving_product_id]=[dbo].[SavingProducts].[id] 
                               INNER JOIN [dbo].[ClientTypes] ON
                               [dbo].[ClientTypes].[id]=[dbo].[SavingProductsClientTypes].[client_type_id]
                               WHERE 1 = 1";

            if (!pShowAlsoDeleted)
                sqlText += " AND deleted = 0";

            switch (pClientType)
            {
                case OClientTypes.Person:
                    sqlText += " AND [dbo].[ClientTypes].[type_name] = 'Individual' ";
                    break;
                case OClientTypes.Group:
                    sqlText += "  AND [dbo].[ClientTypes].[type_name] = 'Group' ";
                    break;
                case OClientTypes.Corporate:
                    sqlText += "  AND [dbo].[ClientTypes].[type_name] = 'Corporate'";
                    break;
                case OClientTypes.Village:
                    sqlText += " AND [dbo].[ClientTypes].[type_name]='Village'";
                    break;
            }

            using (SqlCommand selectPackages = new SqlCommand(sqlText, DefaultConnection))
            {
                using (SqlDataReader reader = selectPackages.ExecuteReader())
                {
                    if(reader == null || !reader.HasRows) return new List<ISavingProduct>();
                    while (reader.Read())
                    {
                        ISavingProduct pack;

                        switch (DatabaseHelper.GetChar("product_type", reader))
                        {
                            case 'B' :
                                pack = new SavingBookProduct();
                                break;
                            case 'T' : 
                                pack = new TermDepositProduct();
                                break;
                            //case 'C' : 
                            //    pack = new CompulsorySavingsProduct();
                            //    break;
                            default:
                                pack = null; break;
                        }

                        pack.Id = DatabaseHelper.GetInt32("id", reader);
                        productsList.Add(pack);
                    }
                }
            }
            
            for (int i = 0; i < productsList.Count; i++)
            {
                if (productsList[i] is SavingBookProduct)
                    productsList[i] = SelectBookProduct(productsList[i].Id);
                else if (productsList[i] is TermDepositProduct)
                    productsList[i] = SelectTermeDepositProduct(productsList[i].Id);
                //else if (productsList[i] is CompulsorySavingsProduct)
                //    productsList[i] = SelectCompulsoryProduct(productsList[i].Id);
            }
            return productsList;
        }

        public void DeleteSavingProduct(int pProductId)
        {
            const string sqlText = "Update SavingProducts Set Deleted = 1 Where [id] = @productId";

            using (SqlCommand command = new SqlCommand(sqlText, DefaultConnection))
            {
                DatabaseHelper.InsertInt32Param("@productId", command, pProductId);
                command.ExecuteNonQuery();
            }
        }
    }
}